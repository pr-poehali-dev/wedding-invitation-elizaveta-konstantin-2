interface RSVPData {
  fullName: string;
  partnerName: string;
  attending: string;
  alcohol: string;
  food: string;
  transport: string;
  other: string;
}

export const sendToTelegram = async (formData: RSVPData): Promise<boolean> => {
  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const BOT_TOKEN = 'YOUR_BOT_TOKEN'; // –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç @BotFather
  const CHAT_ID = 'YOUR_CHAT_ID'; // ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
  
  const message = `üéâ –ù–û–í–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ù–ê –°–í–ê–î–¨–ë–£ üéâ

üë§ –§–ò–û: ${formData.fullName}
üíë –°–ø—É—Ç–Ω–∏–∫/—Å–ø—É—Ç–Ω–∏—Ü–∞: ${formData.partnerName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚úÖ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Å–µ—Ç–∏—Ç—å: ${formData.attending === 'yes' ? '–î–∞' : '–ù–µ—Ç'}
üç∑ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫: ${formData.alcohol || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üçΩÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ: ${formData.food || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üöó –°–ø–æ—Å–æ–± –¥–æ–±—Ä–∞—Ç—å—Å—è: ${formData.transport || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${formData.other || '–ù–µ—Ç'}

üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}`;

  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      })
    });

    if (response.ok) {
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      return true;
    } else {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', await response.text());
      return false;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
    return false;
  }
};